#include <stdio.h>
#include <Windows.h>
//Aliniamentul sa nu fie facut automat
#pragma pack(push, 1)

// info https://upload.wikimedia.org/wikipedia/commons/c/c4/BMPfileFormat.png

typedef struct {

    WORD Signature;
    DWORD FileSize;
    DWORD Reserved;
    DWORD FileOffsetToPixelArray;

} BMP_FILE_HEADER, * PBMP_FILE_HEADER;  //2 denumiri de structura, unul ca si file si celelat ca si pointer

typedef struct {

    DWORD DibHeaderSize;
    DWORD ImageWidth;
    DWORD ImageHeight;
    WORD Planes;
    WORD BitsPerPixel;

} DIB_HEADER, * PDIB_HEADER;

#pragma pack(pop)

void main() {
//The directory or path, and the file name. The file name can include wildcard characters, 
    //example, an asterisk (*) or a question mark (?).
    LPCSTR fileName = "*.bmp";
//A pointer to the WIN32_FIND_DATA structure that receives information about a found file or directory.
    WIN32_FIND_DATAA lpFindFileData;
//A handle can be anything from an integer index to a pointer to a resource in kernel space. 
//The idea is that they provide an abstraction of a resource, so you don't need to know much about the resource
//itself to use it.
    HANDLE hFileIterator = FindFirstFileA(fileName, &lpFindFileData);
    if (hFileIterator != NULL) {
        do
        {   //lpFindFileData.cFileName --> numele fisierului pe care il analizam
            printf("Analyzing file %s:\n", lpFindFileData.cFileName);

            //CreateFileA -->Creates or opens a file
            HANDLE openedFile = CreateFileA(
                lpFindFileData.cFileName,
                GENERIC_READ | GENERIC_WRITE,
                FILE_SHARE_READ,
                NULL,
                OPEN_EXISTING,
                lpFindFileData.dwFileAttributes,
                NULL
            );

            if (openedFile == INVALID_HANDLE_VALUE)
                continue;
            //Creates or opens a named or unnamed file mapping object for a specified file.
            HANDLE mppedFile = CreateFileMappingA(
                openedFile,
                NULL,
                PAGE_READWRITE,
                0,
                0,
                NULL
            );

            if (mppedFile == NULL)
            {
                CloseHandle(openedFile);
                continue;
            }
            //Maps a view of a file mapping into the address space of a calling process.
            BYTE* startFile = (BYTE*)MapViewOfFile(
                mppedFile,
                FILE_MAP_ALL_ACCESS,
                0, 0, 0);

            if (startFile == NULL)
            {
                CloseHandle(mppedFile);
                CloseHandle(openedFile);
                continue;
            }

            // BMP_FILE_HEADER *bmpHeader = (BMP_FILE_HEADER *)startFile;
            PBMP_FILE_HEADER bmpHeader = (PBMP_FILE_HEADER)startFile;

            //%x = hexa number
            printf("signature = %x\n", bmpHeader->Signature);

            // 0x4D42 = BMP Signature
            if (bmpHeader->Signature != 0x4D42)
            {
                CloseHandle(mppedFile);
                CloseHandle(openedFile);
                continue;
            }

            printf("signature = %d\n", bmpHeader->FileSize);

            // Alte moduri:
            //                    = (PDIB_HEADER)(bmpHeader + 1)
            PDIB_HEADER dibHeader = (PDIB_HEADER)(startFile + sizeof(BMP_FILE_HEADER));

            printf("file offset to px array = %x", bmpHeader->FileOffsetToPixelArray);

            BYTE* imageDataStart = startFile + bmpHeader->FileOffsetToPixelArray;

            for (int i = 0; i < 300; i += 3)
            {
                imageDataStart[i + 0] = 0xFF;
                imageDataStart[i + 1] = 0;
                imageDataStart[i + 2] = 0;
            }



        } while (FindNextFileA(hFileIterator, &lpFindFileData));
    }


}
